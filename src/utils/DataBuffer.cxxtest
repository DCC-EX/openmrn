#include "utils/DataBuffer.hxx"

#include "utils/test_main.hxx"

DataBufferPool g_pool(64);

class DataBufferTest : public ::testing::Test
{
protected:
    DataBufferTest()
    {
        g_pool.alloc(&b_);
        lastFree_ = g_pool.free_items();
    }

    /// Adds an expectation that exactly count item has been freed.
    void expect_freed(unsigned count = 1)
    {
        EXPECT_EQ(lastFree_ + count, g_pool.free_items());
    }

    DataBuffer *b_;
    unsigned lastFree_;
};

TEST_F(DataBufferTest, alloc_free)
{
    EXPECT_EQ(64u, b_->size());
    b_->unref();
    expect_freed();
}

TEST_F(DataBufferTest, alloc_resize_free)
{
    EXPECT_EQ(64u, b_->size());
    b_->set_size(3);
    b_->unref();
    expect_freed();
}

TEST_F(DataBufferTest, BufferPtr_free)
{
    b_->set_size(2);
    {
        auto r = get_buffer_deleter(b_);
    }
    expect_freed();
    DataBuffer *bb;
    g_pool.alloc(&bb);
    EXPECT_EQ(bb, b_);
}

TEST_F(DataBufferTest, data_content)
{
    memcpy(b_->data(), "abcd", 4);
    b_->set_size(4);
    EXPECT_EQ('b', b_->data()[1]);

    uint8_t *p;
    unsigned avail;
    b_->get_read_pointer(2, &p, &avail);
    EXPECT_EQ('c', *p);
    EXPECT_EQ(2u, avail);
}

TEST_F(DataBufferTest, ref_single)
{
    EXPECT_EQ(b_, b_->ref_all(13));
    EXPECT_EQ(2u, b_->references());
    expect_freed(0);
    {
        auto r = get_buffer_deleter(b_);
    }
    EXPECT_EQ(1u, b_->references());
    expect_freed(0);
    b_->unref();
    expect_freed(1);
}

TEST_F(DataBufferTest, ref_unref_linked)
{
    DataBuffer* c;
    g_pool.alloc(&c);
    b_->set_next(c);
    b_->set_size(4);
    memcpy(b_->data(), "abcd", 4);
    memcpy(c->data(), "efghij", 6);
    c->set_size(6);

    EXPECT_EQ(1u, b_->references());
    EXPECT_EQ(1u, c->references());

    b_->ref_all(8);
    EXPECT_EQ(2u, b_->references());
    EXPECT_EQ(2u, c->references());
    
    expect_freed(0);
    {
        auto r = get_buffer_deleter(b_);
    }
    expect_freed(0);
    EXPECT_EQ(1u, b_->references());
    EXPECT_EQ(2u, c->references());

    b_->unref_all(8);
    expect_freed(1);
    EXPECT_EQ(1u, c->references());

    c->unref_all(3);
    expect_freed(2);
}

TEST_F(DataBufferTest, readptr_linked)
{
    DataBuffer* c;
    g_pool.alloc(&c);
    b_->set_next(c);
    b_->set_size(4);
    memcpy(b_->data(), "abcd", 4);
    memcpy(c->data(), "efghij", 6);
    c->set_size(6);

    uint8_t *p;
    unsigned avail;
    b_->get_read_pointer(6, &p, &avail);
    EXPECT_EQ('g', *p);
    EXPECT_EQ(4u, avail);
}
