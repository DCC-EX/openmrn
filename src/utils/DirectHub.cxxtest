#include "utils/DirectHub.hxx"

#include "utils/test_main.hxx"

DataBufferPool pool_64(64);

class DirectHubTest : public ::testing::Test
{
protected:
    /// Creates two hub ports via socketpair and registers them to the data
    /// hub. Saves the other endpoints to fdOne_ and fdTwo_.
    void create_two_ports()
    {
        int fd[2];
        ERRNOCHECK("socketpair", socketpair(AF_UNIX, SOCK_STREAM, 0, fd));
        int ffd[2];
        ERRNOCHECK("socketpair", socketpair(AF_UNIX, SOCK_STREAM, 0, ffd));
        create_port_for_fd(hub_, fd[0]);
        create_port_for_fd(hub_, ffd[0]);
        fdOne_ = fd[1];
        fdTwo_ = ffd[1];
        wait_for_main_executor();
    }

    /// Reads whatever data is available on fd (up to 1000 bytes) and returns
    /// it as a string.
    /// @param fd a readable file descriptor
    /// @return data read.
    string read_some(int fd)
    {
        char buf[1000];
        int ret = ::read(fd, buf, sizeof(buf));
        HASSERT(ret >= 0);
        return string(buf, ret);
    }

    DirectHubInterface<uint8_t[]> *hub_ {create_hub(&g_executor)};

    int fdOne_ = -1;
    int fdTwo_ = -1;
};

TEST_F(DirectHubTest, end_to_end_data)
{
    create_two_ports();

    ASSERT_EQ(6, ::write(fdOne_, "abcdef", 6));
    usleep(10000);

    EXPECT_EQ("abcdef", read_some(fdTwo_));

    ASSERT_EQ(1, ::write(fdOne_, "x", 1));
    usleep(10000);
    ASSERT_EQ(1, ::write(fdOne_, "y", 1));
    usleep(10000);
    ASSERT_EQ(1, ::write(fdOne_, "z", 1));
    usleep(10000);
    ASSERT_EQ(1, ::write(fdOne_, "w", 1));
    usleep(10000);

    EXPECT_EQ("xyzw", read_some(fdTwo_));
}

TEST_F(DirectHubTest, notifies_messages_empty)
{
    BarrierNotifiable bn1(EmptyNotifiable::DefaultInstance());
    BarrierNotifiable bn2(EmptyNotifiable::DefaultInstance());
    DataBuffer *buf;
    pool_64.alloc(&buf);
    EXPECT_EQ(1u, buf->references());
    buf->set_done(&bn1);
    bool complete = false;
    hub_->enqueue_send(new CallbackExecutable([this, buf, &bn2, &complete]() {
        hub_->mutable_message()->done_ = &bn2;
        hub_->mutable_message()->payload_ = buf;
        hub_->mutable_message()->skip_ = 0;
        hub_->mutable_message()->size_ = 10;
        hub_->do_send();
        complete = true;
    }));
    EXPECT_TRUE(complete);
    EXPECT_TRUE(bn1.is_done());
    EXPECT_TRUE(bn2.is_done());
    EXPECT_EQ(0u, buf->references());
}
