#include "utils/DirectHub.hxx"

#include "executor/StateFlow.hxx"
#include "utils/test_main.hxx"

DataBufferPool pool_64(64);

Executor<1> g_read_executor("read_thread", 0, 1024);
Service g_read_service(&g_read_executor);

/// This state flow
class ReadAllFromFd : public StateFlowBase
{
public:
    ReadAllFromFd()
        : StateFlowBase(&g_read_service)
    {
    }

    ~ReadAllFromFd()
    {
        stop();
    }

    /// Start reading all bytes from an fd.
    /// @param fd the file descriptor of the socket.
    /// @param cb will be called on a different thread for all data that was
    /// read.
    void start(int fd, std::function<void(uint8_t *, size_t)> cb)
    {
        ERRNOCHECK("dup", fd_ = dup(fd));
        ERRNOCHECK("fcntl", ::fcntl(fd_, F_SETFL, O_RDWR | O_NONBLOCK));

        cb_ = std::move(cb);
        isRunning_ = true;
        start_flow(STATE(read_some));
    }

    /// Stops reading. Takes about 10 msec to run.
    void stop()
    {
        if (isRunning_)
        {
            doExit_ = true;
            exitNotify_.wait_for_notification();
        }
    }

private:
    Action read_some()
    {
        return read_repeated_with_timeout(&helper_, MSEC_TO_NSEC(10), fd_,
            readBuf_, sizeof(readBuf_), STATE(read_done));
    }

    Action read_done()
    {
        size_t arrived = sizeof(readBuf_) - helper_.remaining_;
        if (doExit_)
        {
            isRunning_ = false;
            exitNotify_.notify();
            return exit();
        }
        else if (arrived > 0)
        {
            cb_(readBuf_, arrived);
        }
        return call_immediately(STATE(read_some));
    }

    /// Helper for stateflow reads.
    StateFlowTimedSelectHelper helper_ {this};
    /// Buffer to read data into.
    uint8_t readBuf_[1000];
    /// File descriptor to read from.
    int fd_ = -1;
    /// Requests the flow to exit.
    bool doExit_ = false;
    /// True if the flow was ever started and not yet stopped.
    bool isRunning_ = false;
    /// This function will be called with all incoming data.
    std::function<void(uint8_t *, size_t)> cb_;
    /// Used to synchronize the exit of this flow.
    SyncNotifiable exitNotify_;
};

/// Helper class to send a one-byte message to the
class SendSomeData : public Executable
{
public:
    SendSomeData(DirectHubInterface<uint8_t[]> *hub, const std::string &data,
        size_t skip = 0)
        : hub_(hub)
    {
        pool_64.alloc(&bufHead_);
        bufHead_->set_done(&bn1_);
        buf_.reset(bufHead_);
        memcpy(buf_.data_write_pointer(), data.data(), data.size());
        buf_.data_write_advance(data.size());
        if (skip) {
            buf_.transfer_head(skip);
        }
    }

    ~SendSomeData()
    {
        EXPECT_TRUE(is_done());
    }

    void enqueue()
    {
        hub_->enqueue_send(this);
    }

    void run() override
    {
        isRunning_.post();
        hasSeenRun_ = false;
        sem_.wait();
        hub_->mutable_message()->done_ = &bn2_;
        hub_->mutable_message()->buf_ = buf_.transfer_head(buf_.size());
        hub_->do_send();
    }

    bool is_done()
    {
        return bn1_.is_done() && bn2_.is_done() && (bufHead_->references() == 0);
    }

    DirectHubInterface<uint8_t[]> *hub_;
    BarrierNotifiable bn1_ {EmptyNotifiable::DefaultInstance()};
    BarrierNotifiable bn2_ {EmptyNotifiable::DefaultInstance()};
    DataBuffer* bufHead_;
    LinkedDataBufferPtr buf_;
    size_t len_;
    size_t skip_;
    /// We take one share of this semaphore when sending. Owners can go from
    /// blocking to nonblocking sending this way. Default is one share.
    OSSem sem_ {1};

    bool hasSeenRun_ {false};
    /// This semaphore is notified when we are blocked.
    OSSem isRunning_ {0};
};

class DirectHubTest : public ::testing::Test
{
protected:
    DirectHubTest()
    {
#if OPENMRN_FEATURE_BSD_SOCKETS_IGNORE_SIGPIPE
        // We expect write failures to occur but we want to handle them where
        // the error occurs rather than in a SIGPIPE handler.
        signal(SIGPIPE, SIG_IGN);
#endif // OPENMRN_FEATURE_BSD_SOCKETS_IGNORE_SIGPIPE

        /// re-creates main buffer pool to have good expectations on the total
        /// size of memory allocated.
        delete mainBufferPool;
        mainBufferPool = nullptr;
        init_main_buffer_pool();
    }

    ~DirectHubTest()
    {
        if (fdOne_ >= 0)
        {
            ::close(fdOne_);
            fdOne_ = -1;
        }
        if (fdTwo_ >= 0)
        {
            ::close(fdTwo_);
            fdTwo_ = -1;
        }
        wait_for_main_executor();
    }

    /// Creates two hub ports via socketpair and registers them to the data
    /// hub. Saves the other endpoints to fdOne_ and fdTwo_.
    void create_two_ports()
    {
        int fd[2];
        ERRNOCHECK("socketpair", socketpair(AF_UNIX, SOCK_STREAM, 0, fd));

        int buflen = 1700;
        socklen_t optlen = sizeof(buflen);
        ERRNOCHECK("setsockopt",
            setsockopt(fd[0], SOL_SOCKET, SO_SNDBUF, &buflen, optlen));
        ERRNOCHECK("setsockopt",
            setsockopt(fd[1], SOL_SOCKET, SO_SNDBUF, &buflen, optlen));

        int ffd[2];
        ERRNOCHECK("socketpair", socketpair(AF_UNIX, SOCK_STREAM, 0, ffd));
        ERRNOCHECK("setsockopt",
            setsockopt(ffd[0], SOL_SOCKET, SO_SNDBUF, &buflen, optlen));
        ERRNOCHECK("setsockopt",
            setsockopt(ffd[1], SOL_SOCKET, SO_SNDBUF, &buflen, optlen));
        create_port_for_fd(hub_, fd[0],
            std::unique_ptr<MessageSegmenter>(
                create_trivial_message_segmenter()));
        create_port_for_fd(hub_, ffd[0],
            std::unique_ptr<MessageSegmenter>(
                create_trivial_message_segmenter()));
        fdOne_ = fd[1];
        fdTwo_ = ffd[1];
        wait_for_main_executor();
    }

    /// Reads whatever data is available on fd (up to 1000 bytes) and returns
    /// it as a string.
    /// @param fd a readable file descriptor
    /// @return data read.
    string read_some(int fd)
    {
        char buf[1000];
        int ret = ::read(fd, buf, sizeof(buf));
        HASSERT(ret >= 0);
        return string(buf, ret);
    }

    ssize_t write_some(int fd)
    {
        char inbuf[900];
        memset(inbuf, 0x55, sizeof(inbuf));
        return ::write(fd, inbuf, sizeof(inbuf));
    }

    DirectHubInterface<uint8_t[]> *hub_ {create_hub(&g_executor)};

    int fdOne_ = -1;
    int fdTwo_ = -1;
    ReadAllFromFd fdReaderFlow_;
};

/// Sends some data from one remote socket through the hub to another remote
/// socket.
TEST_F(DirectHubTest, end_to_end_data)
{
    create_two_ports();

    ASSERT_EQ(6, ::write(fdOne_, "abcdef", 6));
    usleep(10000);

    EXPECT_EQ("abcdef", read_some(fdTwo_));

    ASSERT_EQ(1, ::write(fdOne_, "x", 1));
    usleep(10000);
    ASSERT_EQ(1, ::write(fdOne_, "y", 1));
    usleep(10000);
    ASSERT_EQ(1, ::write(fdOne_, "z", 1));
    usleep(10000);
    ASSERT_EQ(1, ::write(fdOne_, "w", 1));
    usleep(10000);

    EXPECT_EQ("xyzw", read_some(fdTwo_));
}

/// Checks that the done notifiables are called when sending to an empty hub.
TEST_F(DirectHubTest, notifies_messages_empty)
{
    BarrierNotifiable bn1(EmptyNotifiable::DefaultInstance());
    BarrierNotifiable bn2(EmptyNotifiable::DefaultInstance());
    DataBuffer *buf;
    pool_64.alloc(&buf);
    EXPECT_EQ(1u, buf->references());
    buf->set_done(&bn1);
    bool complete = false;
    hub_->enqueue_send(new CallbackExecutable([this, buf, &bn2, &complete]() {
        hub_->mutable_message()->done_ = &bn2;
        hub_->mutable_message()->buf_.reset(buf, 0, 10);
        hub_->do_send();
        complete = true;
    }));
    EXPECT_TRUE(complete);
    EXPECT_TRUE(bn1.is_done());
    EXPECT_TRUE(bn2.is_done());
    EXPECT_EQ(0u, buf->references());
}

/// Transfers a lot of data through the hub from one remote socket to another.
TEST_F(DirectHubTest, large_end_to_end_data)
{
    create_two_ports();

    size_t bytes = 0;
    fdReaderFlow_.start(
        fdTwo_, [&bytes](uint8_t *, size_t len) { bytes += len; });
    for (int i = 0; i < 100; i++)
    {
        write_some(fdOne_);
    }
    usleep(30000);
    LOG(INFO, "total bytes transferred: %zu", bytes);
    EXPECT_EQ(90000u, bytes);
    fdReaderFlow_.stop();
}

/// Verifies that the on_exit notifiable is called when an error on the socket
/// causes the port to be closed.
TEST_F(DirectHubTest, close_notify)
{
    int fd[2];
    int ffd[2];
    ERRNOCHECK("socketpair", socketpair(AF_UNIX, SOCK_STREAM, 0, fd));
    ERRNOCHECK("socketpair", socketpair(AF_UNIX, SOCK_STREAM, 0, ffd));
    LOG(INFO, "socket %d %d", fd[0], fd[1]);
    SyncNotifiable n;
    create_port_for_fd(hub_, fd[0], std::unique_ptr<MessageSegmenter>(create_trivial_message_segmenter()), &n);
    create_port_for_fd(hub_, ffd[0], std::unique_ptr<MessageSegmenter>(create_trivial_message_segmenter()));
    write_some(fd[1]);

    read_some(ffd[1]);
    ::close(fd[1]);
    write_some(ffd[1]);
    usleep(10000);
    n.wait_for_notification();

    ::close(ffd[1]);
}

/// In this test we try to write a lot of data into one port while not reading
/// anything from the other. This situation should push back on the sending
/// port after some limited amount of intermediate buffers are filled.
TEST_F(DirectHubTest, socket_blocked)
{
    create_two_ports();

    int buflen;
    socklen_t optlen = sizeof(buflen);
    ERRNOCHECK("getsockopt",
        getsockopt(fdOne_, SOL_SOCKET, SO_SNDBUF, &buflen, &optlen));
    LOG(INFO, "snd buf %d", buflen);

    ERRNOCHECK("fcntl", ::fcntl(fdOne_, F_SETFL, O_RDWR | O_NONBLOCK));

    size_t total = 0;
    for (int i = 0; i < 200; ++i)
    {
        int wr = write_some(fdOne_);
        if (wr >= 0)
            total += wr;
        wr = write_some(fdOne_);
        if (wr >= 0)
            total += wr;
        usleep(100);
    }
    LOG(INFO, "total %u pool %u", (unsigned)total,
        (unsigned)mainBufferPool->total_size());
    // The total bytes buffered should not be very much, despite having tried
    // to write a lot of data into the socket.
    EXPECT_GT(5000u, total);
    // Memory usage is also under control.
    EXPECT_GT(5000u, mainBufferPool->total_size());
}

/// Proxies data to two remote sockets from a locally injected source. Checks
/// that done notifiables are called and data arrives correctly.
TEST_F(DirectHubTest, local_source_two_targets)
{
    create_two_ports();
    SendSomeData d(hub_, "abcde");
    d.enqueue();
    wait_for_main_executor();
    EXPECT_TRUE(d.is_done());
    usleep(2000);
    string rda = read_some(fdOne_);
    string rdb = read_some(fdTwo_);
    EXPECT_EQ("abcde", rda);
    EXPECT_EQ("abcde", rdb);
}

/// Simulates a race condition between two threads sending.
TEST_F(DirectHubTest, race_condition)
{
    create_two_ports();
    SendSomeData d(hub_, "a");
    d.sem_.wait(); // makes it blocking.
    g_read_executor.add(new CallbackExecutable([&d]() { d.enqueue(); }));
    d.isRunning_.wait(); // blocked indeed.

    SendSomeData d2(hub_, "b");
    d2.enqueue();
    SendSomeData d3(hub_, "c");
    d3.enqueue();
    SendSomeData d4(hub_, "d");
    d4.enqueue();
    wait_for_main_executor();
    EXPECT_FALSE(d2.hasSeenRun_);
    EXPECT_FALSE(d2.is_done());

    d.sem_.post();        // unblock
    d4.isRunning_.wait(); // should get all the way to d4.
    wait_for_main_executor();

    EXPECT_TRUE(d.is_done());
    EXPECT_TRUE(d2.is_done());
    EXPECT_TRUE(d3.is_done());
    EXPECT_TRUE(d4.is_done());
    usleep(2000);
    string rda = read_some(fdOne_);
    string rdb = read_some(fdTwo_);
    EXPECT_EQ("abcd", rda);
    EXPECT_EQ("abcd", rdb);
}

/// Tests that skip_ is correctly handled.
TEST_F(DirectHubTest, check_skip)
{
    create_two_ports();
    SendSomeData d(hub_, "abc");
    d.enqueue();
    SendSomeData d2(hub_, "xyzde", 3);
    d2.enqueue();
    wait_for_main_executor();
    EXPECT_TRUE(d2.is_done());
    usleep(2000);
    string rda = read_some(fdOne_);
    string rdb = read_some(fdTwo_);
    EXPECT_EQ("abcde", rda);
    EXPECT_EQ("abcde", rdb);
}

/// Tests that skipping and chaining is correctly handled.
TEST_F(DirectHubTest, check_size_skip_chain)
{
    create_two_ports();
    BarrierNotifiable bn2(EmptyNotifiable::DefaultInstance());
    DataBuffer *buf1;
    DataBuffer *buf2;
    pool_64.alloc(&buf1);
    pool_64.alloc(&buf2);
    buf2->set_done(&bn2);
    ASSERT_EQ(64u, buf1->size());
    buf1->set_size(13);
    EXPECT_EQ(13u, buf1->size());
    unsigned skip = buf1->size() - 3;
    memcpy(buf1->data() + skip, "abc", 3);
    buf1->set_next(buf2);
    memcpy(buf2->data(), "de", 2);

    hub_->enqueue_send(new CallbackExecutable([this, skip, buf1]() {
        hub_->mutable_message()->buf_.reset(buf1, skip, 5);
        hub_->do_send();
    }));
    wait_for_main_executor();
    EXPECT_EQ(0u, buf1->references());
    EXPECT_EQ(0u, buf2->references());
    EXPECT_TRUE(bn2.is_done());
    usleep(2000);
    string rda = read_some(fdOne_);
    string rdb = read_some(fdTwo_);
    EXPECT_EQ("abcde", rda);
    EXPECT_EQ("abcde", rdb);
}
