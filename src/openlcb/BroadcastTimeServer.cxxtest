#include "utils/async_if_test_helper.hxx"

#include "openlcb/BroadcastTimeServer.hxx"

#if 1
#define PRINT_ALL_PACKETS() print_all_packets()
#else
#define PRINT_ALL_PACKETS()
#endif

// test helper
::testing::AssertionResult IsBetweenInclusive(int val, int a, int b)
{
    if((val >= a) && (val <= b))
        return ::testing::AssertionSuccess();
    else
        return ::testing::AssertionFailure()
               << val << " is outside the range " << a << " to " << b;
}

namespace openlcb
{

class BroadcastTimeServerTest : public AsyncNodeTest
{
protected:
    BroadcastTimeServerTest()
    {
        PRINT_ALL_PACKETS();

        // sync sequence
        expect_packet(":X1954422AN010100000100F001;");
        expect_packet(":X1954422AN0101000001004000;");
        expect_packet(":X1954422AN01010000010037B2;");
        expect_packet(":X1954422AN0101000001002101;");
        expect_packet(":X1954422AN0101000001000000;");

        server_ = new BroadcastTimeServer(
            node_, BroadcastTimeDefs::DEFAULT_FAST_CLOCK_ID);
        wait_for_event_thread();
        sleep(1);
    }

    ~BroadcastTimeServerTest()
    {
        server_->shutdown();
        while (!server_->is_shutdown())
        {
            usleep(10000);
            wait();
        }

        delete server_;
    }

    BroadcastTimeServer *server_;
};

TEST_F(BroadcastTimeServerTest, Create)
{
    // consumer/producer identify ranges
    expect_packet(":X1952422AN010100000100FFFF;");
    expect_packet(":X194A422AN0101000001008000;");

    send_packet(":X19970001N;");
    wait_for_event_thread();

    // time is not setup, clock is not running, expect 0 as default
    EXPECT_EQ(server_->time(), 0);
    EXPECT_EQ(server_->day_of_week(), BroadcastTimeDefs::THURSDAY);
    EXPECT_EQ(server_->day_of_year(), 0);
};

TEST_F(BroadcastTimeServerTest, Start)
{
#if 0
    EXPECT_CALL(*server_, update_callback(0, 0, false)).Times(1);
    send_start(client1_);

    client1_->settime(4, 1970, 1, 1, 0, 0);

    EXPECT_CALL(*client1_, update_callback(0, 4, true)).Times(1);
    EXPECT_CALL(*client1_, update_callback(60, 4, true)).Times(1);
    sync(client1_, 500);
    wait();
    
    
    // check the time, we give it a finite range just in case of some OS jitter
    EXPECT_TRUE(IsBetweenInclusive(client1_->time(), 60, 62));
    EXPECT_EQ(client1_->day_of_week(), BroadcastTimeDefs::THURSDAY);
    EXPECT_EQ(client1_->day_of_year(), 0);
#endif
};


} // namespace openlcb
